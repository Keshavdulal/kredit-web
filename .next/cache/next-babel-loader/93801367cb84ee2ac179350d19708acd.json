{"ast":null,"code":"var _jsxFileName = \"/Users/keshavdulal/Code/kredit/frontend/src/components/InputField.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\nimport { useField } from 'formik'; // fancy way of telling my Input field to take props\n// as any regular input element would take\n\nconst InputField = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, label), __jsx(Input, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  })), error && __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  }, error));\n};\n\nexport default InputField;","map":{"version":3,"sources":["/Users/keshavdulal/Code/kredit/frontend/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","label","props","field","error","name","placeholder"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACIC,WADJ,EAEIC,SAFJ,EAGIC,KAHJ,EAIIC,gBAJJ,QAKO,iBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;AACA;;AAMA,MAAMC,UAAqC,GAAG,UAAyB;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AAAA,MAAZC,KAAY;;AACnE,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBL,QAAQ,CAACG,KAAD,CAAnC;AACA,SACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCJ,KAAjC,CADJ,EAEI,MAAC,KAAD,eACQE,KADR,EAEQD,KAFR;AAGI,IAAA,EAAE,EAAEC,KAAK,CAACE,IAHd;AAII,IAAA,WAAW,EAAEH,KAAK,CAACI,WAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAQKF,KAAK,IAAI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CARd,CADJ;AAYH,CAdD;;AAgBA,eAAeJ,UAAf","sourcesContent":["import React, { InputHTMLAttributes } from 'react';\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    FormErrorMessage,\n} from '@chakra-ui/core';\nimport { useField } from 'formik';\n\n// fancy way of telling my Input field to take props\n// as any regular input element would take\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n    name: string;\n    label: string;\n};\n\nconst InputField: React.FC<InputFieldProps> = ({ label, ...props }) => {\n    const [field, { error }] = useField(props);\n    return (\n        <FormControl isInvalid={!!error}>\n            <FormLabel htmlFor={field.name}>{label}</FormLabel>\n            <Input\n                {...field}\n                {...props}\n                id={field.name}\n                placeholder={props.placeholder}\n            />\n            {error && <FormErrorMessage>{error}</FormErrorMessage>}\n        </FormControl>\n    );\n};\n\nexport default InputField;\n"]},"metadata":{},"sourceType":"module"}