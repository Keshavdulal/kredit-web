{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/keshavdulal/Code/kredit/frontend/src/components/InputField.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\nimport { useField } from 'formik'; // fancy way of telling my Input field to take props\n// as any regular input element would take\n\nvar InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, label), __jsx(Input, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  })), error && __jsx(FormErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  }, error));\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\nexport default InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/Users/keshavdulal/Code/kredit/frontend/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","label","props","field","error","name","placeholder"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACIC,WADJ,EAEIC,SAFJ,EAGIC,KAHJ,EAIIC,gBAJJ,QAKO,iBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;AACA;;AAMA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAAyB;AAAA;;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAAA,kBACxCH,QAAQ,CAACG,KAAD,CADgC;AAAA;AAAA,MAC5DC,KAD4D;AAAA,MACnDC,KADmD,iBACnDA,KADmD;;AAEnE,SACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCJ,KAAjC,CADJ,EAEI,MAAC,KAAD,eACQE,KADR,EAEQD,KAFR;AAGI,IAAA,EAAE,EAAEC,KAAK,CAACE,IAHd;AAII,IAAA,WAAW,EAAEH,KAAK,CAACI,WAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAQKF,KAAK,IAAI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CARd,CADJ;AAYH,CAdD;;GAAMJ,U;UACyBD,Q;;;KADzBC,U;AAgBN,eAAeA,UAAf","sourcesContent":["import React, { InputHTMLAttributes } from 'react';\nimport {\n    FormControl,\n    FormLabel,\n    Input,\n    FormErrorMessage,\n} from '@chakra-ui/core';\nimport { useField } from 'formik';\n\n// fancy way of telling my Input field to take props\n// as any regular input element would take\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n    name: string;\n    label: string;\n};\n\nconst InputField: React.FC<InputFieldProps> = ({ label, ...props }) => {\n    const [field, { error }] = useField(props);\n    return (\n        <FormControl isInvalid={!!error}>\n            <FormLabel htmlFor={field.name}>{label}</FormLabel>\n            <Input\n                {...field}\n                {...props}\n                id={field.name}\n                placeholder={props.placeholder}\n            />\n            {error && <FormErrorMessage>{error}</FormErrorMessage>}\n        </FormControl>\n    );\n};\n\nexport default InputField;\n"]},"metadata":{},"sourceType":"module"}